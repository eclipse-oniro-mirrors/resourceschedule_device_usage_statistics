/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

sequenceable OHOS.DeviceUsageStats.BundleActiveEvent;
sequenceable OHOS.DeviceUsageStats.BundleActivePackageStats;
sequenceable OHOS.DeviceUsageStats.BundleActiveModuleRecord;
sequenceable OHOS.DeviceUsageStats.BundleActiveEventStats;
interface OHOS.DeviceUsageStats.IAppGroupCallback;
interface OHOS.DeviceUsageStats.IBundleActiveService {
    void ReportEvent([in] BundleActiveEvent event, [in] int userId);
    void IsBundleIdle([out] boolean isBundleIdle, [in] String bundleName, [in] int userId);
    void IsBundleUsePeriod([out] boolean isUsePeriod, [in] String bundleName, [in] int userId);
    void QueryBundleStatsInfoByInterval([out] List<BundleActivePackageStats> packageStats,
        [in] int intervalType, [in] long beginTime, [in] long endTime, [in] int userId);
    void QueryBundleEvents([out] List<BundleActiveEvent> bundleActiveEvents, [in] long beginTime,
        [in] long endTime, [in] int userId);
    void QueryBundleStatsInfos([out] List<BundleActivePackageStats> bundleActivePackageStats,
        [in] int intervalType, [in] long beginTime, [in] long endTime);
    void QueryCurrentBundleEvents([out] List<BundleActiveEvent> bundleActiveEvents,
        [in] long beginTime, [in]long endTime);
    void QueryAppGroup([out] int appGroup, [out] String bundleName, [in] int userId);
    void SetAppGroup([in] String bundleName, [in] int newGroup, [in] int userId);
    void QueryModuleUsageRecords([in] int maxNum, [out] List<BundleActiveModuleRecord> results, [in] int userId);
    void RegisterAppGroupCallBack([in] IAppGroupCallback observer);
    void UnRegisterAppGroupCallBack([in] IAppGroupCallback observer);
    void QueryDeviceEventStats([in] long beginTime, [in] long endTime,
        [out]List<BundleActiveEventStats> eventStats, [in] int userId);
    void QueryNotificationEventStats([in] long beginTime, [in] long endTime,
        [out]List<BundleActiveEventStats> eventStats, [in] int userId);
}